题目描述
输入一个N阶方阵(0<N<10),输出此方阵顺时针旋转M(0<=M<=10000)次后的方阵
旋转举例：（如下四个三阶方阵从上到下为数字围绕中心顺时针旋转）
1 2 3
4 5 6
7 8 9
7 4 1
8 5 2
9 6 3
9 8 7
6 5 4
3 2 1
3 6 9
2 5 8
1 4 7
输入描述：
输入第一行一个正整数N (0<N<10)
接下来N行每行N个整数用空格分开，为方阵的数据
接下来一行一个正整数M (0<=M<=10000)
说明：不用考虑异常输入，所有输入都是正常的，严格遵从取值范围
输出描述：
N行，每行N个整数，用空格分开，为旋转后的数据
示例1
输入
3
1 2 3
4 5 6
7 8 9
2
输出
9 8 7
6 5 4
3 2 1
"""


思路：顺时针旋转，相当于先进行做对角线的反转，再上下对换位置。同时，每4次是一组旋转方式。
   即：1 2 3       9 6 3          7 4 1
       4 5 6  -》  8 5 2  -》     8 5 2
       7 8 9       7 4 1          9 6 3
代码：
def fanzhuan(mat):
    m = len(mat)
    for i in range(m - 1):
        for j in range(m - 1):
            mat[i][j], mat[m - 1 - j][m - 1 - i] = mat[m - 1 - j][m - 1 - i], mat[i][j]
    return mat[::-1][:]

while True:
    try:
        m = int(input())
        mat = []
        for i in range(m):
            mat.append(list(map(int, input().split())))
        n = int(input())
        for i in range(n):
            mat = fanzhuan(mat)
        for i in range(m % 4):
            print(' '.join(map(str, mat[i])))
    except:
        break
